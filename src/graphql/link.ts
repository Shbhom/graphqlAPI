import { Link, User } from "@prisma/client";
import { GraphQLResolveInfo } from "graphql";
import { extendType, objectType, nonNull, stringArg, intArg } from "nexus";
import { arg, idArg, MaybePromise } from "nexus/dist/core";
import { NexusGenObjects } from "../../nexus-typegen";

export const link = objectType({
  name: "link",
  definition(t) {
    t.nonNull.int("id");
    t.nonNull.string("description");
    t.nonNull.string("url");
    t.field("postedBy", {
      type: "User",
      resolve(parent, args, context) {
        return context.prisma.link
          .findUnique({ where: { id: parent.id } })
          .postedBy();
      },
    });
    t.nonNull.list.nonNull.field("voters", {
      type: "User",
      resolve(parent, args, context) {
        return context.prisma.link
          .findUnique({ where: { id: parent.id } })
          .voters();
      },
    });
  },
});

// let links: NexusGenObjects["link"][] = [
//   //here we are creating an array of links by implementing the link interface generated by the NEXUS in its gentype file
//   {
//     id: 1,
//     url: "howtographql.com",
//     description: "learn graphql with ease",
//   },
//   {
//     id: 2,
//     url: "shbhom.github.io",
//     description: "this guy learned graphql using the howtographql tutorial",
//   },
// ];
export const Linkquery = extendType({
  //here we are extending the query root type by adding query named feed
  type: "Query",
  definition(t) {
    t.nonNull.list.nonNull.field("feed", {
      //here we are returning an array of form [list!]!
      type: link,
      resolve(parent, args, context, info) {
        return context.prisma.link.findMany();
      },
    });
  },
});
export const linkMutation = extendType({
  type: "Mutation",
  definition(t) {
    t.nonNull.field("post", {
      type: "link",
      args: {
        description: nonNull(stringArg()),
        url: nonNull(stringArg()),
      },
      resolve(parent, args, context) {
        const { url, description } = args;
        const { userId } = context;
        console.log(context);
        if (!userId) {
          throw new Error(`cannot post without logging in`);
        }
        const newlink = context.prisma.link.create({
          data: {
            description: args.description,
            url: args.url,
            postedBy: { connect: { id: userId } },
          },
        });
        return newlink;
      },
    });
  },
});

export const getLink = extendType({
  type: "Query",
  definition(t) {
    t.field("getLink", {
      type: "link",
      args: {
        id: nonNull(intArg()),
      },
      resolve(parent, args, context) {
        const retLink = context.prisma.link.findUnique({
          where: {
            id: args.id,
          },
        });
        return retLink;
        // const { id } = args;
        // let retLink = links.find((L: NGraphQLResolveInfoexusGenObjects["link"]) => L.id === id);
        // return retLink || null;
      },
    });
  },
});

export const updateLink = extendType({
  type: "Mutation",
  definition(t) {
    t.nonNull.field("updateLink", {
      type: "link",
      args: { id: intArg(), url: stringArg(), description: stringArg() },
      resolve(parent, args, context) {
        // const { id, url, description } = args;
        // let retLink = links.find((L: NexusGenObjects["link"]) => L.id === id)!;
        // if (!retLink) {
        //   throw new Error(`Link not found with id:${id}`);
        // }
        // retLink.url = url!; //added ! after in postfix to tell ts compiler that this value will be not null
        // retLink.description = description!;
        // return retLink;
        const retLink = context.prisma.link.update({
          where: {
            id: args.id!,
          },
          data: {
            url: args.url!,
            description: args.description!,
          },
        });
        if (!retLink) {
          throw new Error(`Link not found with id:${args.id}`);
        }
        // retLink.url = args.url;
        // retLink.description = args.description; //if findUnique is use then we can update the data fieilds like this
        return retLink;
      },
    });
  },
});

export const deleteLink = extendType({
  type: "Mutation",
  definition(t) {
    t.nonNull.field("deleteLink", {
      type: "link",
      args: { id: intArg() },
      resolve(parent, args, context) {
        const retLink = context.prisma.link.delete({
          where: {
            id: args.id!,
          },
        });
        if (!retLink) {
          throw new Error(`Link not found with id:${args.id}`);
        }
        return retLink;
      },
    });
  },
});
